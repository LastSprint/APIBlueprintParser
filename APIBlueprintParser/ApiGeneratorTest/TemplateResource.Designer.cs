//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApiGeneratorTest {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class TemplateResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TemplateResource() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ApiGeneratorTest.TemplateResource", typeof(TemplateResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {
        ///  &quot;Logging&quot;: {
        ///    &quot;IncludeScopes&quot;: false,
        ///    &quot;Debug&quot;: {
        ///      &quot;LogLevel&quot;: {
        ///        &quot;Default&quot;: &quot;Warning&quot;
        ///      }
        ///    },
        ///    &quot;Console&quot;: {
        ///      &quot;LogLevel&quot;: {
        ///        &quot;Default&quot;: &quot;Warning&quot;
        ///      }
        ///    }
        ///  }
        ///}.
        /// </summary>
        internal static string appsettings {
            get {
                return ResourceManager.GetString("appsettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {
        ///  &quot;Logging&quot;: {
        ///    &quot;IncludeScopes&quot;: false,
        ///    &quot;LogLevel&quot;: {
        ///      &quot;Default&quot;: &quot;Debug&quot;,
        ///      &quot;System&quot;: &quot;Information&quot;,
        ///      &quot;Microsoft&quot;: &quot;Information&quot;
        ///    }
        ///  }
        ///}.
        /// </summary>
        internal static string appsettings_Development {
            get {
                return ResourceManager.GetString("appsettings_Development", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System.Collections.Generic;
        ///using Microsoft.AspNetCore.Mvc;
        ///using System;
        ///
        ///namespace $ProjectName$.Controllers {
        ///    
        ///    public class $Name$Controller : Controller {
        ///        $Code$
        ///    }
        ///}.
        /// </summary>
        internal static string Controller {
            get {
                return ResourceManager.GetString("Controller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {
        ///  &quot;iisSettings&quot;: {
        ///    &quot;windowsAuthentication&quot;: false,
        ///    &quot;anonymousAuthentication&quot;: true,
        ///    &quot;iisExpress&quot;: {
        ///      &quot;applicationUrl&quot;: &quot;http://localhost:55556/&quot;,
        ///      &quot;sslPort&quot;: 0
        ///    }
        ///  },
        ///  &quot;profiles&quot;: {
        ///    &quot;IIS Express&quot;: {
        ///      &quot;commandName&quot;: &quot;IISExpress&quot;,
        ///      &quot;launchBrowser&quot;: true,
        ///      &quot;launchUrl&quot;: &quot;$api/values&quot;,
        ///      &quot;environmentVariables&quot;: {
        ///        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;
        ///      }
        ///    },
        ///    &quot;$projectname$&quot;: {
        ///      &quot;commandName&quot;: &quot;Project&quot;,
        ///      &quot;launchBrowser&quot;: true,
        ///    [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string launchSettings {
            get {
                return ResourceManager.GetString("launchSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [Route(&quot;$uri$&quot;)]
        ///[$HttpMethod$]
        ///public $ReturnType$ $MethodName$($Params$[FromBody]object value) {
        ///    $Code$
        ///}.
        /// </summary>
        internal static string Method {
            get {
                return ResourceManager.GetString("Method", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на //
        ///// EquatableRequaest.cs
        ///// 29.08.2017
        ///// Created by Kravchenkov Alexander
        ///// sprintend@gmail.com
        /////
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///namespace $projectname$ {
        ///
        ///	public enum ParameterType {
        ///		Optional = 0,
        ///		Required = 1
        ///	}
        ///
        ///	public enum ValueType {
        ///		Object = 0,
        ///		Number = 1,
        ///		String = 2,
        ///		Bool = 3
        ///	}
        ///
        ///	public struct RequestParameter {
        ///		public ParameterType Type { get; private set; }
        ///		public ValueType ValueType { get; private set; }
        ///
        ///		public object Value { get; pr [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string Model {
            get {
                return ResourceManager.GetString("Model", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Threading.Tasks;
        ///using Microsoft.AspNetCore;
        ///using Microsoft.AspNetCore.Hosting;
        ///using Microsoft.Extensions.Configuration;
        ///using Microsoft.Extensions.Logging;
        ///
        ///namespace $projectname$ {
        ///
        ///    public class Program {
        ///        
        ///        public static void Main(string[] args) {
        ///            BuildWebHost(args).Run();
        ///        }
        ///
        ///        public static IWebHost BuildWebHost(string[] args) =&gt;
        ///            WebHost.CreateDefaul [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string Program {
            get {
                return ResourceManager.GetString("Program", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;
        ///
        ///  &lt;PropertyGroup&gt;
        ///    &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;
        ///  &lt;/PropertyGroup&gt;
        ///
        ///  &lt;ItemGroup&gt;
        ///    &lt;Folder Include=&quot;wwwroot\&quot; /&gt;
        ///  &lt;/ItemGroup&gt;
        ///
        ///  &lt;ItemGroup&gt;
        ///    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.All&quot; Version=&quot;2.0.0&quot; /&gt;
        ///  &lt;/ItemGroup&gt;
        ///
        ///  &lt;ItemGroup&gt;
        ///    &lt;DotNetCliToolReference Include=&quot;Microsoft.VisualStudio.Web.CodeGeneration.Tools&quot; Version=&quot;2.0.0&quot; /&gt;
        ///  &lt;/ItemGroup&gt;
        ///
        ///&lt;/Project&gt;.
        /// </summary>
        internal static string project {
            get {
                return ResourceManager.GetString("project", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Microsoft Visual Studio Solution File, Format Version 12.00
        ///# Visual Studio 2012
        ///Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;$projectname$&quot;, &quot;$projectname$\$projectname$.csproj&quot;, &quot;{AF8F41ED-068E-489B-AE3A-E210500C6C87}&quot;
        ///EndProject
        ///Global
        ///	GlobalSection(SolutionConfigurationPlatforms) = preSolution
        ///		Debug|Any CPU = Debug|Any CPU
        ///		Release|Any CPU = Release|Any CPU
        ///	EndGlobalSection
        ///	GlobalSection(ProjectConfigurationPlatforms) = postSolution
        ///		{AF8F41ED-068E-489B-AE3A-E210500C6C87}.Debug|Any CPU.Ac [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string Solution {
            get {
                return ResourceManager.GetString("Solution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Threading.Tasks;
        ///using Microsoft.AspNetCore.Builder;
        ///using Microsoft.AspNetCore.Hosting;
        ///using Microsoft.Extensions.Configuration;
        ///using Microsoft.Extensions.DependencyInjection;
        ///using Microsoft.Extensions.Logging;
        ///using Microsoft.Extensions.Options;
        ///
        ///namespace $projectname$ {
        ///    
        ///    public class Startup {
        ///
        ///        public Startup(IConfiguration configuration) {
        ///            Configuration = configuration;
        ///        }
        ///
        ///        publ [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string Startups {
            get {
                return ResourceManager.GetString("Startups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &lt;Properties StartupConfiguration=&quot;{AF8F41ED-068E-489B-AE3A-E210500C6C87}|Default&quot;&gt;
        ///  &lt;MonoDevelop.Ide.Workbench ActiveDocument=&quot;$projectname$/Properties/launchSettings.json&quot;&gt;
        ///    &lt;Files&gt;
        ///      &lt;File FileName=&quot;$projectname$/Properties/launchSettings.json&quot; Line=&quot;1&quot; Column=&quot;1&quot; /&gt;
        ///    &lt;/Files&gt;
        ///  &lt;/MonoDevelop.Ide.Workbench&gt;
        ///  &lt;MonoDevelop.Ide.Workspace ActiveConfiguration=&quot;Debug&quot; /&gt;
        ///  &lt;MonoDevelop.Ide.DebuggingService.Breakpoints&gt;
        ///    &lt;BreakpointStore /&gt;
        ///  &lt;/MonoDevelop.Ide.DebuggingService.Breakpoints&gt;
        ///  &lt;Mono [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string userprefs {
            get {
                return ResourceManager.GetString("userprefs", resourceCulture);
            }
        }
    }
}
